#!/usr/bin/env python3
import os
import shutil
import argparse
import subprocess
import configparser
from pathlib import Path

dotfile_path = Path.home() / '.dotfiles'
config_name = 'dfmconfig'

config = configparser.ConfigParser()
config.read(str(dotfile_path / config_name))
config_spec = {
    'link': {
        'exclude': ['README.md', 'bin']
    }, 'install': {
        'oh-my-zsh': ""
    }
}

exclude = [config_name] + config['link']['exclude'].split(',')


def get_me_their(name):
    return dotfile_path / name, Path.home() / ('.' + name)


def link(args):
    if args.name:
        result = __link(args.name)
        if result != 0:
            exit(1)

    else:
        unsuccessful = []
        for path in dotfile_path.glob('[!.]*'):
            if path.name not in exclude and path.is_file():
                if args.merge:
                    args.ours = True
                    args.theirs = True
                result = __link(path.name, args.ours, args.theirs)
                if result != 0:
                    unsuccessful.append(path.name)
        if unsuccessful:
            print('\n\nFollowing files could not be linked:')
            for name in unsuccessful:
                print(name)


def __link(name, ours=False, theirs=False):
    # Return value
    # 0: Success
    # 1: File does not exist
    # 2: Link conflict: Both files
    # 3: Link conflict: Both symlinks

    me, their = get_me_their(name)

    if their.resolve() == me:
        print('Already linked: %s' % name)
        return 0

    if me.is_file() != their.is_file():
        if me.is_file():
            their.symlink_to(me)
            print('ln -s %s %s' % (me, their))
        elif their.is_symlink():
            original = their.resolve()
            shutil.copy(str(original), str(me))
            print('cp %s %s' % (original, me))
            their.unlink()
            print('rm %s' % their)
            their.symlink_to(me)
            print('ln -s %s %s' % (me, their))
        else:
            shutil.move(str(their), str(me))
            print('mv %s %s' % (their, me))
            their.symlink_to(me)
            print('ln -s %s %s' % (me, their))
    elif me.is_symlink() and their.is_symlink():
        print('Link conflict: Both files are symlinks: %s' % name)
        return 3
    else:
        if me.is_file() and their.is_file():
            if ours and theirs:
                pass
            elif ours or their.is_symlink():
                their.unlink()
                print('rm %s' % their)
                their.symlink_to(me)
                print('ln -s %s %s' % (me, their))
            elif theirs or me.is_symlink():
                me.unlink()
                print('rm %s' % me)
                shutil.move(str(their), str(me))
                print('mv %s %s' % (their, me))
                their.symlink_to(me)
                print('ln -s %s %s' % (me, their))
            else:
                print('Link conflict: Both files have contents: %s' % name)
                return 2
        else:
            print('File does not exist: %s' % me)
            return 1
    return 0


def unlink(args):
    if args.name:
        result = __unlink(args.name)
        if result != 0:
            exit(1)

    else:
        unsuccessful = []
        for path in dotfile_path.glob('[!.]*'):
            if path.name not in exclude and path.is_file():
                result = __unlink(path.name)
                if result != 0:
                    unsuccessful.append(path.name)
        if unsuccessful:
            print('\n\nFollowing files could not be unlinked:')
            for name in unsuccessful:
                print(name)


def __unlink(name):
    # Return value
    # 0: Success
    # 1: Not linked

    me, their = get_me_their(name)

    if their.resolve() != me:
        print('Not linked: %s' % name)
        return 1

    their.unlink()
    print('rm %s' % their)
    shutil.copy(str(me), str(their))
    print('cp %s %s' % (me, their))
    return 0


def remove(args):
    if args.name:
        pass
    else:
        pass


def update(args):
    os.chdir(str(dotfile_path))
    subprocess.run(['git', 'pull'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    parser_link = subparsers.add_parser('link')
    parser_link.add_argument('name', type=str, nargs='?')
    group = parser_link.add_mutually_exclusive_group()
    group.add_argument('-m', '--merge', action='store_true')
    group.add_argument('-o', '--ours', action='store_true')
    group.add_argument('-t', '--theirs', action='store_true')
    parser_link.set_defaults(func=link)

    parser_unlink = subparsers.add_parser('unlink')
    parser_unlink.add_argument('name', type=str, nargs='?')
    parser_unlink.set_defaults(func=unlink)

    parser_remove = subparsers.add_parser('remove')
    parser_remove.add_argument('name', type=str, nargs='?')
    parser_remove.set_defaults(func=remove)

    parser_update = subparsers.add_parser('update')
    parser_update.set_defaults(func=update)

    args = parser.parse_args()
    args.func(args)
