" plug {{{
if empty(glob("~/.vim/autoload/plug.vim"))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
call plug#begin()
" find / navigate
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'tmhedberg/matchit'

" autocomplete / format / edit
Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }
Plug 'rstacruz/vim-closer'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/sideways.vim'
Plug 'neoclide/coc.nvim', { 'tag': '*' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
" Plug 'SirVer/ultisnips'

" visual
Plug 'Yggdroot/indentLine'
Plug 'markonm/traces.vim'

" language
Plug 'sheerun/vim-polyglot'

" git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'alexdavid/vim-min-git-status', { 'on': 'Gministatus' }

" statusbar
Plug 'itchyny/lightline.vim'
Plug 'mgee/lightline-bufferline'
Plug 'maximbaz/lightline-trailing-whitespace'

" colorscheme
" Plug 'nanotech/jellybeans.vim'
" Plug 'koirand/tokyo-metro.vim', { 'commit': '59527e4' }
" Plug 'phanviet/vim-monokai-pro'
" Plug 'tomasiser/vim-code-dark'
Plug 'cocopon/iceberg.vim'
call plug#end()
" }}}

" general {{{
set hidden
set autoread
set updatetime=100
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.swp,*.pyc,*.zip,venv,.git,*.class
set backspace=indent,eol,start
set ttimeoutlen=10

let mapleader="\<SPACE>"

" ui {{{
set nowrap
set scrolloff=3
set laststatus=2
set noshowmode
set showtabline=2
set showcmd
set number
set relativenumber
set cursorline

syntax on
silent! colorscheme iceberg

if has('mouse')
    set mouse=a
endif

let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
" }}}

" indent and tab {{{
filetype indent plugin on
set autoindent
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
" }}}

" search {{{
set ignorecase
set smartcase
set hlsearch
set incsearch
" }}}
" }}}

" plugin settings {{{
" nerdtree {{{
let NERDTreeIgnore=['\.pyc$']
let g:NERDTreeDirArrowExpandable='+'
let g:NERDTreeDirArrowCollapsible='-'
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeMinimalUI=1
" }}}

" emmet-vim {{{
let g:user_emmet_leader_key='<C-e>'
" }}}

" gitgutter {{{
let g:gitgutter_map_keys = 0
" }}}

" lightline {{{
let s:p={
            \ 'normal': {
            \   'left': [['brightgreen', 'gray2', 'bold'], ['black', 'brightgreen'], ['red', 'white']],
            \   'middle': [['gray7', 'gray2']],
            \   'right': [['black', 'gray8']],
            \   'error': [['white', 'brightestred']],
            \   'warning': [['black', 'brightorange']]
            \ },
            \ 'inactive': {
            \   'left': [['gray7', 'gray2'], ['black', 'gray9']],
            \   'middle': [['gray7', 'gray2']],
            \   'right': []
            \ },
            \ 'insert': {
            \   'left': [['mediumcyan', 'gray2', 'bold'], ['black', 'mediumcyan'], ['red', 'white']],
            \   'middle': [['mediumcyan', 'darkestblue']],
            \   'right': [['darkestcyan', 'mediumcyan']]
            \ },
            \ 'visual': {
            \   'left': [['brightorange', 'gray2', 'bold'], ['black', 'brightorange'], ['red', 'white']],
            \   'middle': [['brightestorange', 'darkred']],
            \   'right': [['black', 'brightorange']]
            \ },
            \ 'replace': {
            \   'left': [['gray2', 'brightred', 'bold'], ['black', 'mediumcyan'], ['red', 'white']],
            \   'middle': [['mediumcyan', 'darkestblue']],
            \   'right': [['darkestcyan', 'mediumcyan']]
            \ },
            \ 'tabline': {
            \   'left': [['gray9', 'gray4']],
            \   'tabsel': [['gray9', 'gray1']],
            \   'middle': [['gray2', 'gray8']],
            \   'right': [['gray9', 'gray3']]
            \ }
            \ }
silent! let g:lightline#colorscheme#custom#palette=lightline#colorscheme#fill(s:p)
let g:lightline#bufferline#show_number=1
let g:lightline#bufferline#min_buffer_count=2
let g:lightline#trailing_whitespace#indicator='â€¢'
let g:lightline={
            \ 'colorscheme': 'custom',
            \ 'component': {
            \   'lineinfo': "%{line('.') . '/' . line('$')}",
            \ },
            \ 'component_expand': {
            \   'buffers': 'lightline#bufferline#buffers',
            \   'trailing': 'lightline#trailing_whitespace#component',
            \ },
            \ 'component_type': {
            \   'buffers': 'tabsel',
            \   'trailing': 'warning',
            \ },
            \ 'component_function': {
            \   'gitbranch': 'fugitive#head',
            \ },
            \ 'mode_map': {
            \   'n': 'N',
            \   'i': 'I',
            \   'R': 'R',
            \   'v': 'V',
            \   'V': 'V',
            \   "\<C-v>": 'V',
            \   'c': 'C',
            \   's': 'S',
            \   'S': 'S',
            \   "\<C-s>": 'S',
            \   't': 'T'
            \ },
            \ 'tabline': {'left': [['buffers']], 'right': [[]]},
            \ 'active': {
            \   'left': [
            \       ['mode', 'paste'],
            \       ['gitbranch', 'filename'],
            \       ['readonly', 'modified']
            \   ],
            \   'right': [
            \       ['trailing', 'lineinfo'],
            \       ['fileformat', 'fileencoding', 'filetype']
            \   ]
            \ },
            \ 'inactive': {
            \   'left': [['filename'], ['readonly', 'modified']],
            \   'right': [['lineinfo']]
            \ }
            \ }
" }}}

" coc.nvim {{{
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

inoremap <silent> <expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

nnoremap <silent> K :call <SID>show_documentation()<CR>

nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>ca <Plug>(coc-codeaction)
nmap <leader>cf <Plug>(coc-format)
nmap <leader>cr <Plug>(coc-rename)
nmap <silent> <leader>cd :CocList diagnostics<CR>
" }}}
" }}}

" autocmd {{{
autocmd FileType * set formatoptions-=c fo-=r fo-=o " disable comment continuation

autocmd FileType kotlin
            \ let b:closer=1 |
            \ let b:closer_flags='([{'
" }}}

" keymap {{{
" no I don't need you
map q: <Nop>
nnoremap Q <Nop>
nnoremap <SPACE> <Nop>
xnoremap <SPACE> <Nop>

nnoremap Y y$

vnoremap < <gv
vnoremap > >gv

nnoremap + <C-a>
nnoremap - <C-x>

nnoremap <silent> <CR> :noh<CR>

nmap <silent> <leader>af :Autoformat<CR>

nmap <silent> <C-n> :NERDTreeToggle<CR>
nmap <silent> <leader>uu :UndotreeToggle<CR>:UndotreeFocus<CR>

nmap <silent> <leader>gs :Gministatus<CR>
nmap <silent> <leader>gc :Gcommit --verbose<CR>
nmap <silent> <leader>gr :Gread<CR>
nmap <silent> <leader>gw :Gwrite<CR>
nmap <silent> <leader>ge :Gedit<CR>
nmap <silent> <leader>gd :Gdiff<CR>
nmap <silent> <leader>gb :Gblame<CR>
nmap <silent> <leader>gp :Gpush<CR>
nmap <silent> <leader>gl :Gpull<CR>

nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
nmap <leader>hs <Plug>GitGutterStageHunk
nmap <leader>hu <Plug>GitGutterUndoHunk

nmap <silent> <leader>ff :Files<CR>
nmap <silent> <leader>fb :Buffers<CR>
nmap <silent> <leader>fl :BLines<CR>
nmap <leader>fr :Rg 
nmap <silent> <leader>ft :BTags<CR>
nmap <silent> <leader>fT :Tags<CR>
nmap <silent> <leader>fh :History<CR>
nmap <silent> <leader>f: :History:<CR>
nmap <silent> <leader>f/ :History/<CR>

nmap <silent> <leader>tt :TagbarToggle<CR>

nmap <silent> [a :SidewaysJumpLeft<CR>
nmap <silent> ]a :SidewaysJumpRight<CR>
nmap <silent> [A :SidewaysLeft<CR>
nmap <silent> ]A :SidewaysRight<CR>
omap aa <Plug>SidewaysArgumentTextobjA
xmap aa <Plug>SidewaysArgumentTextobjA
omap ia <Plug>SidewaysArgumentTextobjI
xmap ia <Plug>SidewaysArgumentTextobjI
" }}}

" vim:fdm=marker
